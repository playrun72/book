#!groovy
  
// import shared library
@Library("dsoLibrary@master") _
  
// populate variables from folder
withFolderProperties{
    REGISTRY_TRUST = "${env.REGISTRY_TRUST}"
    REGISTRY_TRUST_CRED_ID = "${env.REGISTRY_TRUST_CRED_ID}"
    REGISTRY_DEV = "${env.REGISTRY_DEV}"
    REGISTRY_DEV_CRED_ID = "${env.REGISTRY_DEV_CRED_ID}"
    PROJECT_ID = "${env.PROJECT_ID}"
    MIRROR_REGISTRY_DEV = "${env.MIRROR_REGISTRY_DEV}"
    MIRROR_REGISTRY_DEV_CRED_ID = "${MIRROR_REGISTRY_DEV_CRED_ID}"
}
  
if (BUILD_ENVIRONMENT == 'trust') {
    REGISTRY = REGISTRY_TRUST
    REGISTRY_CRED_ID = REGISTRY_TRUST_CRED_ID
} 
else if (BUILD_ENVIRONMENT == 'dev') {
    REGISTRY = REGISTRY_DEV
    REGISTRY_CRED_ID = REGISTRY_DEV_CRED_ID
}

def repos = [
    "frontend": "build-gpn-without-gs",
    ]
 
pipeline {
    agent {
        label "$BUILD_ENVIRONMENT"
    }
    parameters {
       booleanParam(name: 'BUILD', defaultValue: true, description: 'Запуск сборки')
       booleanParam(name: 'DEPLOY', defaultValue: false, description: 'Запуск развертывания')
       choice(name: 'DEPLOY_ACTION', choices: ['install', 'uninstall'])
       booleanParam(name: 'DTRACK', defaultValue: false, description: 'Запуск сканирования пакетов и зависимостей')
       booleanParam(name: 'CLAIR', defaultValue: false, description: 'Запуск сканирования инкремента')
       booleanParam(name: 'SAST', defaultValue: false, description: 'Запуск статического анализа кода')
       string(name: "IMAGE_TAG", description: 'Если не указан, генерируется из git commit')
       string(name: 'NODEJS_VERSION', defaultValue: "nodejs16")
       string(name: 'PATH_TO_PACKAGE_JSON', defaultValue: "/package.json")
       string(name: 'APP_GIT_URL', defaultValue: "ssh://alm-itsk.gazprom-neft.local:8180/TFS/GPN/U210001960_orbita/_git/frontend")
       string(name: 'APP_BRANCH', defaultValue: "build-gpn-without-gs")
       string(name: 'OCP_NAMESPACE', defaultValue: "u210001960")
   }
  
    options {
        buildDiscarder(logRotator(numToKeepStr: '100', artifactNumToKeepStr: '100'))
    }
     
    environment {
        GIT_COMMIT_SHORT = sh(
            script: "printf \$(git rev-parse --short ${GIT_COMMIT})",
            returnStdout: true
        )
        IMAGE_TAG = "$params.IMAGE_TAG"
    }
  
    stages {
        stage("Set build name") {
            steps {
                script {
                    if ("$env.IMAGE_TAG" == "null") {
                        wrap([$class: 'BuildUser']) {
                        buildName "$BUILD_NUMBER-${env.GIT_COMMIT_SHORT}"
                        }
                    }
                    else {
                        wrap([$class: 'BuildUser']) {
                        buildName "$BUILD_NUMBER-${params.IMAGE_TAG}"
                        }
                    }
                }
            }
        }

        stage("Set image tag") {
            steps {
                    script {
                        if ("$env.IMAGE_TAG" == "null")
                        {
                            IMAGE_TAG = "$env.GIT_COMMIT_SHORT"
                        }
                        else
                        {
                            echo "$env.IMAGE_TAG"
                        }
                        
                    }
            }
        }

        stage('SaST scan') {
            when {
                expression {
                    params.SAST
                }
            }
            steps {
                echo "====Run SAST job===="
                doSastCheck "manualWithParameters", ["git_project_name": "U210001960_orbita",
                                                     "repos_for_scan": repos,
                                                     "sast_generate_reports": true,
                                                     "sast_incremental": true]
            }
        }

        stage ("Check dependecies") {
            when {
                expression {
                    params.DTRACK
                }
            }
            steps {
                echo "=====Run dtrack job====="
                script {
                    doJob("/DSO_SERVICE/dev/dtrack/dtrack_dev", [[$class: 'StringParameterValue', name: 'BRANCH', value: 'origin/master'], \
                    [$class: 'StringParameterValue', name: 'OCP_APP_NAME', value: "${OCP_APP_NAME}"], \
                    [$class: 'StringParameterValue', name: 'APP_LANG', value: "${params.APP_LANG}"], \
                    [$class: 'StringParameterValue', name: 'APP_BRANCH', value: "${params.APP_BRANCH}"], \
                    [$class: 'StringParameterValue', name: 'PATH_TO_SETTINGS_FILE', value: "${params.PATH_TO_SETTINGS_FILE}"], \
                    [$class: 'StringParameterValue', name: 'SRC_DIR', value: "${params.SRC_DIR}"], \
                    [$class: 'StringParameterValue', name: 'APP_GIT_URL', value: "${params.APP_GIT_URL}"]])
                }
            }
        }
  
        stage("Docker registry login") {
            when {
                expression {
                    params.BUILD
                }
            }
            steps {
                doDocker("login", ["registryCred": "$REGISTRY_CRED_ID",
                                    "registry": "$REGISTRY"])
            }
        }
        stage("Docker build image") {
            when {
                expression {
                    params.BUILD
                }
            }
            steps {
                echo "=====docker build====="
                sh """
                docker build --no-cache -t $REGISTRY/$params.OCP_NAMESPACE/$OCP_APP_NAME:$IMAGE_TAG -f $DOCKERFILE_NAME .
                """
            }
        }
        stage("Docker push image") {
            when {
                expression {
                    params.BUILD
                }
            }
            steps {
                echo "=====docker login and push====="
                sh """
                docker push $REGISTRY/$params.OCP_NAMESPACE/$OCP_APP_NAME:$IMAGE_TAG
                """
            }
        }
        stage("Run Clair") {
            when {
                expression {
                    return params.CLAIR
                }
            }
            steps {
                echo "=====Run clair====="
                script {
                    doJob("/DSO_SERVICE/dev/clair/clair-report", [[$class: 'StringParameterValue', name: 'IMAGE', value: "$MIRROR_REGISTRY_DEV/$params.OCP_NAMESPACE/$OCP_APP_NAME:$IMAGE_TAG"]])
                }
            } 
        }
        stage ("Start deploy") {
            when {
                expression {
                    return params.DEPLOY
                }
            }
            steps {
                build job: "U210001960_orbita/uat-uat4-U210001960/deploy-app", parameters: [
                                                                                string(name: 'IMAGE_TAG', value: "$IMAGE_TAG"), \
                                                                                string(name: 'DEPLOY_ACTION', value: "$DEPLOY_ACTION"), \
                                                                                string(name: 'OCP_APP_NAME', value: "$OCP_APP_NAME"), \
                                                                                booleanParam(name: 'DEPLOY', value: "$params.DEPLOY")
                                                                                ]
            }
        }
    }
}